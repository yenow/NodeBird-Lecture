# 4강

## redux-thunk 이해하기

    - 리덕스 미들웨어 : 리덕스의 기능을 향상, 없던 기능 추가
    - redux-thunk : 리덕스의 비동기 액션을 dispatch할수 있도록 도와줌
    - redux-saga : redux-thunk에 보다 확장된 기능을 제공

    - 비동기액션 : 기존에는 비동기 액션이 불가능했다.
    - 비동기액션의 장점 : 하나의 액션에 dispatch를 여러개 할 수 있다. 예를들어 'A 액션이 성공하면 B액션, A액션이 실패하면 로그' 이런석으로 가능하다.

    ```
    npm i redux-thunk
    ```

    ▫ redux-thunk

        ex)
        const loggerMiddelware = ({dispatch, getState}) => (next) => (action) => {
            console.log(action);
            return next(action);
        }

        const configureStore = () => {
            const middlewares = [thunkMiddleware, loggerMiddelware];     // 리덕스의 기능을 미들웨어로 확장

        composeWithDevTools 이 함수도 DevTools미들웨어가 있는데, 그게 들어있는것

    ▫ redux-saga

        0. redux-saga 설치
            ```
            npm i redux-saga
            ```

        1. sagas 폴더 생성 및 index.js 파일 생성

        2. gennerator 문법   |    ex) export default  function* rootSaga() { }
            - 중단점이 있는 함수
            - 무한 함수를 만들수 있음

        3. axios 설치
            ```
            npm i axios
            ```

        * gennerator와 yield가 많으면 테스트가 편하다

## saga 쪼개고 reducer와 연결하기

## 액션과 상태 정리하기

## 바뀐 상태 적용하고 eslint 점검하기

    npm i -D bable-eslint eslint-config-airbnb eslint-plugin-import
    npm i -D eslint-plugin-react-hooks eslint-plugin-jsx-a11y


## 게시글, 댓글 saga 작성하기

    ▫ 더미데이터를 redering 할때 key값이 겹치는 경우

        ```
        npm i shortid
        ```


## immer 도입하기
 - 리액트의 불변성 때문에 코드가 지저분해지는것을 막아줌

 ex)
 return produce(state, draft) => {
    draft
 };

 ex) immer사용 예시
 const nextState = produce(baseState, draft => {
     draft[1].done = true
     draft.push({title: "Tweet about it"})
 })


## faker로 실감나는 더미데이터 만들기
 - 더미데이터에 들어가는 인물이름을 쉽게 만들어낼 수 있다.
 - placeholder.com 에서도 더미데이터를 만들수 있다고함.
 - redux-toolkit : 이것도 한번 알아보면 좋을듯


## 인피니트 스크롤링 적용하기
 - 스크롤 내릴때 포스트가 계속 나오는 기능 구현
 - 맨 처음 보이는 더미데이터도 서버에서 가져와야함,
 - 아직 백엔드 서버가 없으니 프론트에 saga를 통해서 테스트

 ▫ 이렇게 계속 스크롤하다보면 데이터 양이 너무 많아서 메모리가 터져버릴수 있음
   -> react-virtualized 라는 라이브러리를 사용하면 좋다